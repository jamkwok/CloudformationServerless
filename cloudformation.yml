################## Cloudformation Argus ##################
## Version: 1.0.0
## Author: James Kwok
## Date: 07/06/2017
########################################################
# https://blog.jayway.com/2016/08/17/introduction-to-cloudformation-for-Api-gateway/
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Description: Environment
    Type: String
    Default: test
    AllowedValues:
    - test
Mappings:
   EnvClusterMap:
############# Sit Environment
      test:
        VPC: "vpc-d53256b0"
        SecurityGroups: [ "sg-bd46b4d9", "sg-2cfe5348", "sg-7545b711" , "sg-99288efd", "sg-ac9fbbcb" ]
        Subnets: [ "subnet-9c6847eb" , "subnet-d1f50cb5" ]
Resources:
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "A test Api"
      Name: "RestApi"
      FailOnWarnings: true
  ApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        !Ref RestApi
      ParentId:
        !GetAtt RestApi.RootResourceId
      PathPart: "api"
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  ApigatewayCloudWatchLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                  - "logs:FilterLogEvents"
                Resource: "*"
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role:
        !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = function(event, context, callback) {
            console.log(event);
            callback(null, {"status":"Success"});
          }
      Runtime: "nodejs4.3"
      Timeout: "25"
      TracingConfig:
        Mode: "Active"
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "RestApi"}, "/*"]]
  ApigatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn:
        !GetAtt ApigatewayCloudWatchLogsRole.Arn
  RestDeployment:
    DependsOn:
      - ApiRequest
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Environment
  RestApiStage:
    DependsOn:
      - ApigatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref RestDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: 'INFO'
          DataTraceEnabled: 'true'
      StageName: 'LATEST'
  ApiRequest:
    DependsOn:
      - LambdaPermission
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: '200'
      MethodResponses:
        - StatusCode: '200'
Outputs:
  LoadBalancerDNSName:
    Description: Load Balancer DNS
    Value: 'Hello World'
